// <autogenerated />
namespace Queries.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using Queries*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private BookInfoThroughExternalFile_Repository _BookInfoThroughExternalFile_Repository;
        public BookInfoThroughExternalFile_Repository BookInfoThroughExternalFile { get { return _BookInfoThroughExternalFile_Repository ?? (_BookInfoThroughExternalFile_Repository = (BookInfoThroughExternalFile_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Queries.BookInfoThroughExternalFile")); } }

        private BookGrid_Repository _BookGrid_Repository;
        public BookGrid_Repository BookGrid { get { return _BookGrid_Repository ?? (_BookGrid_Repository = (BookGrid_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Queries.BookGrid")); } }

        /*ModuleInfo RepositoryMembers Queries*/
    }

    /*DataStructureInfo RepositoryAttributes Queries.BookInfoThroughExternalFile*/
    public partial class BookInfoThroughExternalFile_Repository : /*DataStructureInfo OverrideBaseType Queries.BookInfoThroughExternalFile*/ Common.OrmRepositoryBase<Common.Queryable.Queries_BookInfoThroughExternalFile, Queries.BookInfoThroughExternalFile> // Common.QueryableRepositoryBase<Common.Queryable.Queries_BookInfoThroughExternalFile, Queries.BookInfoThroughExternalFile> // Common.ReadableRepositoryBase<Queries.BookInfoThroughExternalFile> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Queries.BookInfoThroughExternalFile*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Queries.BookInfoThroughExternalFile*/

        public BookInfoThroughExternalFile_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Queries.BookInfoThroughExternalFile*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Queries.BookInfoThroughExternalFile*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Queries.BookInfoThroughExternalFile*/
            };
        }
        
        /*DataStructureInfo RepositoryMembers Queries.BookInfoThroughExternalFile*/
    }

    /*DataStructureInfo RepositoryAttributes Queries.BookGrid*/
    public partial class BookGrid_Repository : /*DataStructureInfo OverrideBaseType Queries.BookGrid*/ Common.OrmRepositoryBase<Common.Queryable.Queries_BookGrid, Queries.BookGrid> // Common.QueryableRepositoryBase<Common.Queryable.Queries_BookGrid, Queries.BookGrid> // Common.ReadableRepositoryBase<Queries.BookGrid> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Queries.BookGrid*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Queries.BookGrid*/

        public BookGrid_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Queries.BookGrid*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Queries.BookGrid*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Queries.BookGrid*/
            };
        }
        
        public override IQueryable<Common.Queryable.Queries_BookGrid> Query()
        {
            /*DataStructureInfo RepositoryBeforeQuery Queries.BookGrid*/
            return Query(_domRepository.Bookstore.Book.Query());
        }

        public IQueryable<Common.Queryable.Queries_BookGrid> Query(IQueryable<Common.Queryable.Bookstore_Book> source)
        {
            return source.Select(item => new Common.Queryable.Queries_BookGrid
                {
                    ID = item.ID,
                    Base = item,
                    AuthorName = item.Author.Name,
                    Code = item.Code,
                    NameOfTranslator = item.Extension_ForeignBook.Translator.Name,
                    NumberOfComments = item.Extension_BookInfo.NumberOfComments,
                    Title = item.Title,
                    /*BrowseDataStructureInfo BrowseProperties Queries.BookGrid*/
                });
        }

        /*DataStructureInfo RepositoryMembers Queries.BookGrid*/
    }

    /*ModuleInfo HelperNamespaceMembers Queries*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

